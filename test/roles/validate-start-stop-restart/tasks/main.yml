---
# Assumptions:
# 1) import-build has already run
# 2) distros and tempdirs are in the variable-space
- name: Remove task.output
  file:
    path: ./task.output
    state: absent

- name: Run built containers detached
  shell: >
    ansible-container --debug --project-path
    {{ item.1.path|quote }}/test-{{ item.0.name|quote }} run --detached >>task.output 2>&1
  with_together:
    - "{{ distros }}"
    - "{{ tempdirs.results }}"
  register: output
  ignore_errors: yes
  tags:
    - run
    - run_no_validate
    - restart
    - restart_no_validate
    - stop
    - stop_no_validate

- include: includes/show-output.yml output_file=./task.output registered_output="{{ output }}"

- name: Wait for containers to start
  wait_for:
    timeout: 10

- name: Get docker_ps
  command: docker ps -a
  register: docker_ps

- name: Show docker_ps
  debug: var=docker_ps.stdout_lines

- name: Get docker_logs
  command: docker logs "test{{ item.name }}_{{ item.name }}_1"
  with_items: "{{ distros }}"
  register: docker_logs

- name: Show docker_logs
  debug: var=docker_logs.results

- name: Wait until built containers are running
  command: "docker inspect test{{ item.name }}_{{ item.name }}_1 --format '{% raw %}{{ .State.Status }}{% endraw %}'"
  with_items: "{{ distros }}"
  register: container_run_status
  until: container_run_status.stdout == 'running'
  tags:
    - restart
    - run

- name: Get container start times
  command: "docker inspect test{{ item.name }}_{{ item.name }}_1 --format '{% raw %}{{ .State.StartedAt }}{% endraw %}'"
  with_items: "{{ distros }}"
  register: container_run_startedat
  tags:
    - restart
    - run

- name: Restart containers
  shell: >
    ansible-container --debug --project-path
    {{ item.1.path|quote }}/test-{{ item.0.name|quote }} restart >>task.output 2>&1
  with_together:
    - "{{ distros }}"
    - "{{ tempdirs.results }}"
  register: output
  ignore_errors: yes
  tags:
    - restart
    - restart_no_validate

- include: includes/show-output.yml output_file=./task.output registered_output="{{ output }}"

- name: Wait until restarted containers are running
  command: "docker inspect test{{ item.name }}_{{ item.name }}_1 --format '{% raw %}{{ .State.Status }}{% endraw %}'"
  with_items: "{{ distros }}"
  register: container_restart_status
  until: container_restart_status.stdout == 'running'
  tags:
    - restart

- name: Get container restart times
  command: "docker inspect test{{ item.name }}_{{ item.name }}_1 --format '{% raw %}{{ .State.StartedAt }}{% endraw %}'"
  with_items: "{{ distros }}"
  register: container_restart_startedat
  tags:
    - restart

- name: Ensure containers were restarted
  assert:
    that:
      - item.0.stdout != item.1.stdout
  with_together:
    - "{{ container_run_startedat.results }}"
    - "{{ container_restart_startedat.results }}"
  tags:
    - restart

- name: Stop containers
  shell: >
    ansible-container --debug --project-path
    {{ item.1.path|quote }}/test-{{ item.0.name|quote }} stop >>task.output 2>&1
  with_together:
    - "{{ distros }}"
    - "{{ tempdirs.results }}"
  register: output
  ignore_errors: yes
  tags:
    - stop
    - stop_no_validate
    - run
    - run_no_validate
    - restart
    - restart_no_validate

- include: includes/show-output.yml output_file=./task.output registered_output="{{ output }}"

- name: Get container status
  command: "docker inspect test{{ item.name }}_{{ item.name }}_1 --format '{% raw %}{{ .State.Status }}{% endraw %}'"
  with_items: "{{ distros }}"
  register: container_status
  tags:
    - stop

- name: Ensure containers stop
  assert:
    that:
      - item.0.stdout == 'exited'
  with_together:
    - "{{ container_status.results }}"
  tags:
    - stop
